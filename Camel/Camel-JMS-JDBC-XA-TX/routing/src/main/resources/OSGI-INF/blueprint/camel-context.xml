<?xml version="1.0" encoding="UTF-8"?>

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
    xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 
        http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">


    <!-- Imported OSGi services include the Transaction manager and JDBC DataSource -->
    <reference id="platformTxManager" interface="org.springframework.transaction.PlatformTransactionManager" availability="mandatory"/>
    <reference id="recoverableTxManager" interface="org.apache.geronimo.transaction.manager.RecoverableTransactionManager" availability="mandatory" />

    <!-- Note, in a Fabric managed env you may need to use 
         availability="optional" due to bug
         https://issues.jboss.org/browse/ENTESB-6271.
    -->
    <reference id="mysql-db" interface="javax.sql.DataSource" availability="mandatory" filter="(datasource.name=MySQL)" />


    <!-- ******************** Camel route definition  ********************* -->
    <camelContext xmlns="http://camel.apache.org/schema/blueprint" trace="true">
        <propertyPlaceholder id="properties" location="classpath:sql.properties"/>

        <!-- Sample route using the camel-sql component -->
        <route id="jms-sql-jms-xa" trace="false">
            <!-- 
                Set disableReplyTo=true on consumers to enforce InOnly exchange mode and avoid deadlocks 
                (producer never ends the TX because they are waiting for a not expected reply). 
            -->
           <from uri="amqxa:SQL_IN?disableReplyTo=true" />
            <!-- transacted ref="requiredJta" / --> 
            <log message="REDELIVERED: ${header.JMSRedelivered}" />

            <!--to uri="sql:INSERT INTO users VALUES (#, #, #, #)" /-->
            <to uri="sql:{{insert-user}}" />
            <setBody>
                <constant>Data correctly written to database.</constant>
            </setBody>
            <to uri="log:AfterJDBC?level=INFO&amp;showAll=true" />
            <to uri="amqxa:queue:SQL_OUT" />
        </route>

        <!--  Sample route using camel-jdbc component -->
        <route id="jms-jdbc-jms-xa" trace="false">
           <from uri="amqxa:JDBC_IN" />
            <!-- transacted ref="requiredJta" /-->
            <log message="REDELIVERED: ${header.JMSRedelivered}" />
            <!-- when using XA transactions, need to set resetAutoCommit=false
                otherwise this error may be thrown:
                "java.sql.SQLException: Can't set autocommit to 'true' on an XAConnection"
            -->
            <to uri="jdbc:mysql-db?resetAutoCommit=false" />
            <setBody>
                <constant>Data correctly written to database.</constant>
            </setBody>
            <to uri="log:AfterJDBC?level=INFO&amp;showAll=true" />
            <to uri="amqxa:queue:JDBC_OUT" />
        </route>

        <!--  A bit of cheating. A route that triggers only once to create the DB table -->
        <route id="create-db-tables" autoStartup="false">
           <from uri="timer:CreateDB?delay=2000&amp;repeatCount=1" />
            <log message="Creating DB Table using" />
            <setBody>
                 <constant><![CDATA[CREATE TABLE Users (firstname VARCHAR(50) NOT NULL, lastname VARCHAR(50), login VARCHAR(12), password VARCHAR(20), PRIMARY KEY (login))]]></constant>
                <!--constant><![CDATA[DELETE FROM Users]]></constant-->
            </setBody>
            <log message="${body}" />
            <to uri="jdbc:mysql-db?resetAutoCommit=false" />
        </route>
    </camelContext>


    <!-- custom Camel Processor bean -->
    <bean class="org.apache.camel.demo.camel_jms_jdbc_xa.TestProcessor" id="testProcessor" >
      <property name="simulateProcessingError" value="false" />
      <property name="errorAfterMsgs" value="3" />
    </bean>


    <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
        <property name="dataSource" ref="mysql-db"/>
    </bean>

    <bean id="requiredJta" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="platformTxManager" />
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED" />
    </bean>

 
    <!-- ********************* AMQ configuration ************************** -->
    <bean id="amqxa" class="org.apache.camel.component.jms.JmsComponent">
        <property name="configuration">
            <bean class="org.apache.camel.component.jms.JmsConfiguration">
                <property name="connectionFactory" ref="XAPooledCF" />
                <property name="transacted" value="false" />
                <property name="transactionManager" ref="platformTxManager" />
                <property name="maxConcurrentConsumers" value="1" />
                <property name="deliveryPersistent" value="true" />
                <property name="cacheLevelName" value="CACHE_CONNECTION" />
                <property name="eagerLoadingOfProperties" value="false" />
            </bean>
        </property>
    </bean>

    <bean id="XAPooledCF" class="org.apache.activemq.pool.JcaPooledConnectionFactory" init-method="start" destroy-method="stop">
        <property name="name" value="activemq.default" />
        <property name="maxConnections" value="1" />
        <property name="connectionFactory" ref="AmqXaCF" />
        <property name="transactionManager" ref="recoverableTxManager" />
    </bean>

    <!--
        With CACHE_CONNECTION a consumer gets created and destroyed for every single 
        message, set prefetchPolicy=1 to reduce the overhead improving performance.
    -->
    <bean id="AmqXaCF" class="org.apache.activemq.ActiveMQXAConnectionFactory">
        <property name="brokerURL" value="failover:(tcp://localhost:61616)" />
        <property name="userName" value="admin" />
        <property name="password" value="admin" />
        <property name="prefetchPolicy">
            <bean class="org.apache.activemq.ActiveMQPrefetchPolicy">
                <property name="all" value="1" />
            </bean>
        </property>
        <property name="redeliveryPolicy">
            <bean class="org.apache.activemq.RedeliveryPolicy">
                <property name="maximumRedeliveries" value="6" />
            </bean>
        </property>
    </bean>

    <bean id="resourceManager-AMQ" class="org.apache.activemq.pool.ActiveMQResourceManager" init-method="recoverResource">
        <property name="transactionManager" ref="recoverableTxManager" />
        <!-- CF must be of type ActiveMQConnectionFactory, otherwise no recovery will occur -->
        <property name="connectionFactory" ref="AmqXaCF" />
        <property name="userName" value="admin" />
        <property name="password" value="admin" />

        <!-- name needs to match name property set on JcaPooledConnectionFactory above -->
        <property name="resourceName" value="activemq.default" /> 
    </bean>
</blueprint>
